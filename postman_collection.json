{
	"info": {
		"_postman_id": "todo-rust-api-collection",
		"name": "Todo Rust API - Complete Test Suite",
		"description": "Complete API collection for testing the Rust Todo backend with MongoDB",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Authentication",
			"item": [
				{
					"name": "Signup New User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random email for testing",
									"const timestamp = Date.now();",
									"pm.environment.set('test_email', `test${timestamp}@example.com`);",
									"pm.environment.set('test_password', 'password123');",
									"pm.environment.set('test_name', 'Test User');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('auth_token', response.token);",
									"    pm.environment.set('user_id', response.user.id);",
									"    ",
									"    pm.test('Response has token', function () {",
									"        pm.expect(response.token).to.not.be.empty;",
									"    });",
									"    ",
									"    pm.test('Response has user data', function () {",
									"        pm.expect(response.user.email).to.eql(pm.environment.get('test_email'));",
									"        pm.expect(response.user.name).to.eql(pm.environment.get('test_name'));",
									"        pm.expect(response.user.id).to.not.be.empty;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"{{test_name}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"signup"
							]
						}
					}
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('auth_token', response.token);",
									"    pm.environment.set('user_id', response.user.id);",
									"    ",
									"    pm.test('Response has token', function () {",
									"        pm.expect(response.token).to.not.be.empty;",
									"    });",
									"    ",
									"    pm.test('User data matches', function () {",
									"        pm.expect(response.user.email).to.eql(pm.environment.get('test_email'));",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					}
				}
			]
		},
		{
			"name": "2. Todo CRUD Operations",
			"item": [
				{
					"name": "Create Todo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('todo_id', response.id);",
									"    ",
									"    pm.test('Todo created with correct data', function () {",
									"        pm.expect(response.title).to.eql('Learn Rust Programming');",
									"        pm.expect(response.description).to.include('Build a complete todo API');",
									"        pm.expect(response.completed).to.be.false;",
									"        pm.expect(response.user_id).to.eql(pm.environment.get('user_id'));",
									"        pm.expect(response.id).to.not.be.empty;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Learn Rust Programming\",\n  \"description\": \"Build a complete todo API with authentication and CRUD operations\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/todos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos"
							]
						}
					}
				},
				{
					"name": "Get All Todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test('Response is an array', function () {",
									"        pm.expect(response).to.be.an('array');",
									"    });",
									"    ",
									"    if (response.length > 0) {",
									"        pm.test('Todo has required fields', function () {",
									"            pm.expect(response[0]).to.have.property('id');",
									"            pm.expect(response[0]).to.have.property('title');",
									"            pm.expect(response[0]).to.have.property('completed');",
									"            pm.expect(response[0]).to.have.property('user_id');",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/todos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos"
							]
						}
					}
				},
				{
					"name": "Get Todo by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test('Todo ID matches', function () {",
									"        pm.expect(response.id).to.eql(pm.environment.get('todo_id'));",
									"    });",
									"    ",
									"    pm.test('Todo has all required fields', function () {",
									"        pm.expect(response).to.have.property('title');",
									"        pm.expect(response).to.have.property('completed');",
									"        pm.expect(response).to.have.property('user_id');",
									"        pm.expect(response).to.have.property('created_at');",
									"        pm.expect(response).to.have.property('updated_at');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/todos/{{todo_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos",
								"{{todo_id}}"
							]
						}
					}
				},
				{
					"name": "Update Todo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test('Todo updated correctly', function () {",
									"        pm.expect(response.title).to.eql('Learn Rust Programming - UPDATED');",
									"        pm.expect(response.description).to.include('UPDATED');",
									"        pm.expect(response.completed).to.be.true;",
									"        pm.expect(response.id).to.eql(pm.environment.get('todo_id'));",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Learn Rust Programming - UPDATED\",\n  \"description\": \"UPDATED: Build a complete todo API with authentication and CRUD operations\",\n  \"completed\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/todos/{{todo_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos",
								"{{todo_id}}"
							]
						}
					}
				},
				{
					"name": "Delete Todo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test('Delete confirmation message', function () {",
									"        pm.expect(response.message).to.eql('Todo deleted successfully');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/todos/{{todo_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos",
								"{{todo_id}}"
							]
						}
					}
				}
			]
		},
		{
			"name": "3. Error Test Cases",
			"item": [
				{
					"name": "Unauthorized Access (No Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/todos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos"
							]
						}
					}
				},
				{
					"name": "Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid_token_here"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/todos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"todos"
							]
						}
					}
				},
				{
					"name": "Duplicate User Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"if (pm.response.code === 400) {",
									"    const response = pm.response.json();",
									"    pm.test('Error message about existing user', function () {",
									"        pm.expect(response.error).to.include('already exists');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"{{test_name}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"signup"
							]
						}
					}
				},
				{
					"name": "Invalid Login Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"if (pm.response.code === 400) {",
									"    const response = pm.response.json();",
									"    pm.test('Error message about invalid credentials', function () {",
									"        pm.expect(response.error).to.include('Invalid credentials');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"wrong_password\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://127.0.0.1:8000",
			"type": "string"
		}
	]
}
